generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model caterer {
  cateringid          BigInt  @id @default(autoincrement())
  cateringname        String  @db.VarChar(255)
  ownername           String  @db.VarChar(255)
  email               String  @unique @db.VarChar(255)
  password            String  @db.VarChar(255)
  contact             String? @db.VarChar(15)
  address             String?
  description         String?
  cateringimage       Bytes?
  cateringbannerimage Bytes?
  eventtype           String?
  rating              Float?
  pricerange          String? @db.VarChar(50)

  @@index([email], map: "idx_caterers_email")
  @@map("caterers")
}

model user {
  userid       BigInt  @id @default(autoincrement())
  fullname     String  @db.VarChar(255)
  email        String  @unique @db.VarChar(255)
  password     String  @db.VarChar(255)
  profilephoto Bytes?
  address      String?
  contact      String? @db.VarChar(15)
  bio          String?
  sociallink1  String? @db.VarChar(255)
  sociallink2  String? @db.VarChar(255)
  sociallink3  String? @db.VarChar(255)

  @@index([email], map: "idx_users_email")

  @@map("users")  // Likewise map model user to table users
}

model service {
  serviceid   Int    @id @default(autoincrement())
  cateringid  Int
  name        String
  description String
  price       Float
  capacity    Int
  availability Boolean @default(true)

  @@map("services")
}

model menu {
  menuid            BigInt   @id @default(autoincrement())
  cateringid        BigInt
  name              String
  description       String?
  price             Float  
  rating            Float?   
  cuisinetype       String?
  dietarypreference String?
  image_data        Bytes?   // for storing image binary data

  @@map("menu")
}

model cart {
  cartid     BigInt   @id @default(autoincrement())
  userid     BigInt
  cateringid BigInt
  menuid     BigInt?   
  serviceid  BigInt?      
  quantity   Int

  // No relation fields, only IDs

  @@index([userid])
  @@index([cateringid])
  @@index([menuid])
  @@index([serviceid])
}

model orders {
  orderid     BigInt   @id @default(autoincrement())
  userid      BigInt
  cateringid  BigInt
  total_price Float
  order_date  DateTime @default(now())
  status      String   @default("Pending")
  notes       String?  // optional

  @@map("orders")
}

model order_items {
  itemid     BigInt   @id @default(autoincrement())
  orderid    BigInt
  menuid     BigInt?  // nullable
  serviceid  BigInt?  // nullable
  quantity   Int      @default(1)

  @@map("order_items")
}


model refresh_tokens {
  id        BigInt    @id @default(autoincrement())
  token     String    @unique
  expires_at DateTime
  created_at DateTime  @default(now())

  userid    BigInt?   
  catererid BigInt?   
}

model caterer_ratings {
  ratingid   BigInt   @id @default(autoincrement())
  userid     BigInt
  cateringid BigInt
  rating     Int
  created_at DateTime @default(now())

  @@unique([userid, cateringid])
}






